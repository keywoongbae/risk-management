# Plot the results
library(ggplot2)
ggplot(sir_data, aes(x = time)) +
geom_line(aes(y = Susceptible, color = "Susceptible")) +
geom_line(aes(y = Infected, color = "Infected")) +
geom_line(aes(y = Recovered, color = "Recovered")) +
labs(title = "SIR Model Simulation", x = "Time", y = "Number of Individuals") +
theme_minimal()
sir_data
# Libraries
library(igraph)
# Libraries
install.packages("igraph")
library(igraph)
# Step 1: Network Setup
set.seed(42)
g <- erdos.renyi.game(50, p=0.16, directed=FALSE)  # Erdős–Rényi Network
# Parameters
tau <- 0.1                # Infection rate
gamma_initial <- 0.1      # Initial recovery rate
k <- 1/3                  # Security investment cost constant
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
loss_function <- function(security_level) {
return(1 / security_level)
}
# Total Expense Function
total_expense <- function(security_level) {
return(cost_function(security_level) + loss_function(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
# Step 3: Iterative Security Optimization (Game Simulation)
max_iterations <- 50
for (i in 1:max_iterations) {
new_security_levels <- optimize_security()
if (all(abs(new_security_levels - security_levels) < 0.01)) break
security_levels <- new_security_levels
}
# Total Network Expense Calculation
total_network_expense <- sum(sapply(security_levels, total_expense))
total_network_expense
# Centrality and Security Levels Analysis
degree_centrality <- degree(g)
plot(degree_centrality, security_levels, main="Centrality vs. Security Level")
# Step 4: Allocation Strategies
additional_budget <- 5
allocation_weights <- degree_centrality / sum(degree_centrality)
extra_security <- allocation_weights * additional_budget
# Update Security Levels with Additional Allocation
security_levels <- security_levels + extra_security
# New Network Expense Calculation After Allocation
new_total_network_expense <- sum(sapply(security_levels, total_expense))
# Expense Reduction Calculation
expense_reduction <- (total_network_expense - new_total_network_expense) / total_network_expense * 100
print(paste("Expense reduction:", round(expense_reduction, 2), "%"))
# Visualization of Final Security Levels
plot(degree_centrality, security_levels, main="Security Levels by Node Centrality After Allocation")
library(igraph)
# Step 1: Network Setup
set.seed(42)
g <- erdos.renyi.game(50, p=0.16, directed=FALSE)  # Erdős–Rényi Network
# Parameters
tau <- 0.1                # Infection rate
gamma_initial <- 0.1      # Initial recovery rate
k <- 1/3                  # Security investment cost constant
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
loss_function <- function(security_level) {
return(1 / security_level)
}
# Total Expense Function
total_expense <- function(security_level) {
return(cost_function(security_level) + loss_function(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
# Step 3: Iterative Security Optimization (Game Simulation)
max_iterations <- 50
for (i in 1:max_iterations) {
new_security_levels <- optimize_security()
if (all(abs(new_security_levels - security_levels) < 0.01)) break
security_levels <- new_security_levels
}
# Total Network Expense Calculation
total_network_expense <- sum(sapply(security_levels, total_expense))
total_network_expense
degree_centrality <- degree(g)
plot(degree_centrality, security_levels, main="Centrality vs. Security Level")
plot(g, vertex.size=security_levels * 10, vertex.label=NA, main="Network Security Levels")
library(igraph)
# Step 1: Network Setup
set.seed(42)
g <- erdos.renyi.game(50, p=0.16, directed=FALSE)  # Erdős–Rényi Network
# Parameters
tau <- 0.1                # Infection rate
gamma_initial <- 0.1      # Initial recovery rate
k <- 1/3                  # Security investment cost constant
num_simulations <- 10000000  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
# SIR Simulation Function for a Single Node
simulate_sir_loss <- function(security_level) {
infection_count <- 0
recovery_rate <- security_level  # Higher security level increases recovery rate
for (i in 1:num_simulations) {
infected <- FALSE  # Start as not infected
if (runif(1) < tau) {  # Infection chance based on tau
infected <- TRUE
recovery_time <- rexp(1, rate=recovery_rate)  # Random recovery time
infection_count <- infection_count + recovery_time
}
}
average_loss <- infection_count / num_simulations  # Average loss over simulations
return(average_loss)
}
# Total Expense Function with SIR Loss
total_expense <- function(security_level) {
return(cost_function(security_level) + simulate_sir_loss(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
num_simulations <- 100  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
# SIR Simulation Function for a Single Node
simulate_sir_loss <- function(security_level) {
infection_count <- 0
recovery_rate <- security_level  # Higher security level increases recovery rate
for (i in 1:num_simulations) {
infected <- FALSE  # Start as not infected
if (runif(1) < tau) {  # Infection chance based on tau
infected <- TRUE
recovery_time <- rexp(1, rate=recovery_rate)  # Random recovery time
infection_count <- infection_count + recovery_time
}
}
average_loss <- infection_count / num_simulations  # Average loss over simulations
return(average_loss)
}
# Total Expense Function with SIR Loss
total_expense <- function(security_level) {
return(cost_function(security_level) + simulate_sir_loss(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
# Step 3: Iterative Security Optimization (Game Simulation)
max_iterations <- 50
for (i in 1:max_iterations) {
new_security_levels <- optimize_security()
if (all(abs(new_security_levels - security_levels) < 0.01)) break
security_levels <- new_security_levels
}
# Total Network Expense Calculation
total_network_expense <- sum(sapply(security_levels, total_expense))
total_network_expense
# Centrality and Security Levels Analysis
degree_centrality <- degree(g)
plot(degree_centrality, security_levels, main="Centrality vs. Security Level")
# Visualization of Final Security Levels
plot(g, vertex.size=security_levels * 10, vertex.label=NA, main="Network Security Levels")
# Libraries
library(igraph)
# Step 1: Network Setup
set.seed(42)
g <- barabasi.game(50, m=4, directed=FALSE)  # Barabási–Albert Network (50 nodes, 4 edges per new node)
# Parameters
tau <- 0.1                # Infection rate
gamma_initial <- 0.1      # Initial recovery rate
k <- 1/3                  # Security investment cost constant
num_simulations <- 10000000  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
# SIR Simulation Function for a Single Node
simulate_sir_loss <- function(security_level) {
infection_count <- 0
recovery_rate <- security_level  # Higher security level increases recovery rate
for (i in 1:num_simulations) {
infected <- FALSE  # Start as not infected
if (runif(1) < tau) {  # Infection chance based on tau
infected <- TRUE
recovery_time <- rexp(1, rate=recovery_rate)  # Random recovery time
infection_count <- infection_count + recovery_time
}
}
average_loss <- infection_count / num_simulations  # Average loss over simulations
return(average_loss)
}
# Total Expense Function with SIR Loss
total_expense <- function(security_level) {
return(cost_function(security_level) + simulate_sir_loss(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
num_simulations <- 1000  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
# SIR Simulation Function for a Single Node
simulate_sir_loss <- function(security_level) {
infection_count <- 0
recovery_rate <- security_level  # Higher security level increases recovery rate
for (i in 1:num_simulations) {
infected <- FALSE  # Start as not infected
if (runif(1) < tau) {  # Infection chance based on tau
infected <- TRUE
recovery_time <- rexp(1, rate=recovery_rate)  # Random recovery time
infection_count <- infection_count + recovery_time
}
}
average_loss <- infection_count / num_simulations  # Average loss over simulations
return(average_loss)
}
# Total Expense Function with SIR Loss
total_expense <- function(security_level) {
return(cost_function(security_level) + simulate_sir_loss(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
# Step 3: Iterative Security Optimization (Game Simulation)
max_iterations <- 50
for (i in 1:max_iterations) {
new_security_levels <- optimize_security()
if (all(abs(new_security_levels - security_levels) < 0.01)) break
security_levels <- new_security_levels
}
# Total Network Expense Calculation
total_network_expense <- sum(sapply(security_levels, total_expense))
total_network_expense
# Centrality and Security Levels Analysis
degree_centrality <- degree(g)
plot(degree_centrality, security_levels, main="Centrality vs. Security Level")
# Visualization of Final Security Levels
plot(g, vertex.size=security_levels * 10, vertex.label=NA, main="Network Security Levels")
library(igraph)
# Step 1: Network Setup
set.seed(42)
g <- erdos.renyi.game(50, p=0.16, directed=FALSE)  # Erdős–Rényi Network
# Parameters
tau <- 0.1                # Infection rate
gamma_initial <- 0.1      # Initial recovery rate
k <- 1/3                  # Security investment cost constant
num_simulations <- 1000  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
# SIR Simulation Function for a Single Node
simulate_sir_loss <- function(security_level) {
infection_count <- 0
recovery_rate <- security_level  # Higher security level increases recovery rate
for (i in 1:num_simulations) {
infected <- FALSE  # Start as not infected
if (runif(1) < tau) {  # Infection chance based on tau
infected <- TRUE
recovery_time <- rexp(1, rate=recovery_rate)  # Random recovery time
infection_count <- infection_count + recovery_time
}
}
average_loss <- infection_count / num_simulations  # Average loss over simulations
return(average_loss)
}
# Total Expense Function with SIR Loss
total_expense <- function(security_level) {
return(cost_function(security_level) + simulate_sir_loss(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
# Step 3: Iterative Security Optimization (Game Simulation)
max_iterations <- 50
for (i in 1:max_iterations) {
new_security_levels <- optimize_security()
if (all(abs(new_security_levels - security_levels) < 0.01)) break
security_levels <- new_security_levels
}
# Total Network Expense Calculation
total_network_expense <- sum(sapply(security_levels, total_expense))
total_network_expense
# Centrality and Security Levels Analysis
degree_centrality <- degree(g)
plot(degree_centrality, security_levels, main="Centrality vs. Security Level")
# Visualization of Final Security Levels
plot(g, vertex.size=security_levels * 10, vertex.label=NA, main="Network Security Levels")
c(min(security_levels), max(security_levels))
# Libraries
library(igraph)
# Step 1: Network Setup
set.seed(42)
g <- barabasi.game(50, m=4, directed=FALSE)  # Barabási–Albert Network (50 nodes, 4 edges per new node)
# Parameters
tau <- 0.1                # Infection rate
gamma_initial <- 0.1      # Initial recovery rate
k <- 1/3                  # Security investment cost constant
num_simulations <- 1000  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
# SIR Simulation Function for a Single Node
simulate_sir_loss <- function(security_level) {
infection_count <- 0
recovery_rate <- security_level  # Higher security level increases recovery rate
for (i in 1:num_simulations) {
infected <- FALSE  # Start as not infected
if (runif(1) < tau) {  # Infection chance based on tau
infected <- TRUE
recovery_time <- rexp(1, rate=recovery_rate)  # Random recovery time
infection_count <- infection_count + recovery_time
}
}
average_loss <- infection_count / num_simulations  # Average loss over simulations
return(average_loss)
}
# Total Expense Function with SIR Loss
total_expense <- function(security_level) {
return(cost_function(security_level) + simulate_sir_loss(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
# Step 3: Iterative Security Optimization (Game Simulation)
max_iterations <- 50
for (i in 1:max_iterations) {
new_security_levels <- optimize_security()
if (all(abs(new_security_levels - security_levels) < 0.01)) break
security_levels <- new_security_levels
}
c(min(security_levels), max(security_levels))
# Total Network Expense Calculation
total_network_expense <- sum(sapply(security_levels, total_expense))
total_network_expense
# Centrality and Security Levels Analysis
degree_centrality <- degree(g)
plot(degree_centrality, security_levels, main="Centrality vs. Security Level")
# Visualization of Final Security Levels
plot(g, vertex.size=security_levels * 10, vertex.label=NA, main="Network Security Levels")
# Libraries
library(igraph)
# Step 1: Network Setup
set.seed(42)
g <- barabasi.game(50, m=4, directed=FALSE)  # Barabási–Albert Network (50 nodes, 4 edges per new node)
# Parameters
tau <- 0.1                # Infection rate
gamma_initial <- 0.1      # Initial recovery rate
k <- 1/3                  # Security investment cost constant
num_simulations <- 1000  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
library(data.table)  # 데이터 처리
library(stats)       # 최적화 함수
# ==============================================================================
library(deSolve)
library(VGAM)
set.seed(123)
beta <- 2.556e-7   # 감염률
gamma <- 1         # 회복률
N <- 4064279       # 전체 인구 수
init <- c(S = N - 30100, I = 30100, R = 0)
SIR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I
dI <- beta * S * I - gamma * I
dR <- gamma * I
return(list(c(dS, dI, dR)))
})
}
log(1-300000/4064279)/(-1*300000)
times <- seq(0, 10, by = 0.0001)
parameters <- c(beta = beta, gamma = gamma)
out <- ode(y = init, times = times, func = SIR, parms = parameters)
sir_df <- as.data.frame(out)
dt <- diff(times)[1]  # 시간 간격
cumulative_infected <- sum(sir_df$I * dt)  # I(t) * dt의 총합
print(cumulative_infected)
source("C:/Users/Keywoong/OneDrive - postech.ac.kr/05. 개인자료/01. 깃허브 레포지토리/risk-management-papers/code/Hillairet and Lopez (2021).r", echo=TRUE)
out <- ode(y = init, times = times, func = SIR, parms = parameters)
sir_df <- as.data.frame(out)
# ==============================================================================
library(deSolve)
library(VGAM)
# ==============================================================================
install.packages("deSolve")
# ==============================================================================
#install.packages("deSolve")
library(deSolve)
library(VGAM)
set.seed(123)
beta <- 2.556e-7   # 감염률
gamma <- 1         # 회복률
N <- 4064279       # 전체 인구 수
init <- c(S = N - 30100, I = 30100, R = 0)
SIR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I
dI <- beta * S * I - gamma * I
dR <- gamma * I
return(list(c(dS, dI, dR)))
})
}
log(1-300000/4064279)/(-1*300000)
times <- seq(0, 10, by = 0.0001)
parameters <- c(beta = beta, gamma = gamma)
out <- ode(y = init, times = times, func = SIR, parms = parameters)
sir_df <- as.data.frame(out)
dt <- diff(times)[1]  # 시간 간격
cumulative_infected <- sum(sir_df$I * dt)  # I(t) * dt의 총합
print(cumulative_infected)
plot(sir_df$time, sir_df$S, type = "l", col = "blue", lwd = 2, ylim = c(0, N),
xlab = "Time (Days)", ylab = "Number of People",
main = "SIR Model: Epidemic Over Time")
lines(sir_df$time, sir_df$I, col = "red", lwd = 2)
lines(sir_df$time, sir_df$R, col = "green", lwd = 2)
# 범례 추가
legend("right", legend = c("Susceptible", "Infected", "Recovered"),
col = c("blue", "red", "green"), lwd = 2)
plot(sir_df$time, sir_df$S, type = "l", col = "blue", lwd = 2,
xlab = "Time (Days)", ylab = "Number of Susceptible Individuals",
main = "Number of Susceptible Individuals Over Time")
# I 그래프
plot(sir_df$time, sir_df$I, type = "l", col = "red", lwd = 2,
xlab = "Time (Days)", ylab = "Number of Infected Individuals",
main = "Number of Infected Individuals Over Time")
# R 그래프
plot(sir_df$time, sir_df$R, type = "l", col = "green", lwd = 2,
xlab = "Time (Days)", ylab = "Number of Recovered Individuals",
main = "Number of Recovered Individuals Over Time")
num_simulations <- 10000
cumulative_value_results_exp <- numeric(num_simulations)
cumulative_value_results_pareto <- numeric(num_simulations)
cumulative_value_results_weibull <- numeric(num_simulations)
tau_j <- 7
for (sim in 1:num_simulations) {
cumulative_value_exp <- 0
cumulative_value_pareto <- 0
cumulative_value_weibull <- 0
for (t in seq_along(sir_df$time)) {
lambda_C_exp <- ifelse(t>=tau_j,rexp(1,rate = 1),0)
lambda_C_pareto <- ifelse(t>=tau_j, rpareto(1, scale=1/2, shape=2),0)
lambda_C_weibull <- ifelse(t>=tau_j, rweibull(1, shape = 1),0)
survival_C_exp <- exp(-lambda_C_exp*t)
survival_C_pareto <- exp(-lambda_C_pareto*t)
survival_C_weibull <- exp(-lambda_C_weibull*t)
lambda_T <- beta*i_values[t]
density_T <- lambda_T*exp(-lambda_T*t)
value_exp <- survival_C_exp*density_T
value_pareto <- survival_C_pareto*density_T
value_weibull <- survival_C_weibull*density_T
cumulative_value_exp <- cumulative_value_exp + value_exp*10000
cumulative_value_pareto <- cumulative_value_pareto + value_pareto*10000
cumulative_value_weibull <- cumulative_value_weibull + value_weibull*10000
}
cumulative_value_results_exp[sim] <- cumulative_value_exp
cumulative_value_results_pareto[sim] <- cumulative_value_pareto
cumulative_value_results_weibull[sim] <- cumulative_value_weibull
}
sd(cumulative_value_results_exp)
summary(cumulative_value_results_pareto)
sd(cumulative_value_results_pareto)
summary(cumulative_value_results_weibull)
sd(cumulative_value_results_weibull)
