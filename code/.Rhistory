loss.body <- sas$Loss.Amount...M.[sas$Loss.Amount...M.<threshold]
loss.tail <- sas$Loss.Amount...M.[sas$Loss.Amount...M.>= threshold]
lnorm_model <- fitdist(loss.body, "lnorm", method = "mle")
gpd.model <- fitgpd(loss.tail, 0, "mle")
lnorm_model
gpd.model
# (2) truncate and LDA
num_simulations <- 1000000
total_losses <- numeric(num_simulations)
for (i in 1:num_simulations){
N <- rnbinom(1
,size=nbinom.est$estimate["size"]
, mu=nbinom.est$estimate["mu"] )
if (N==0){
Z <- 0
}else{
Z <- rlognormgpd(N,
lnmean = lnorm_model$estimate["meanlog"],
lnsd = lnorm_model$estimate["sdlog"],
u = 2,
sigmau = gpd.model$fitted.values["scale"],
xi = gpd.model$fitted.values["shape"])
}
Z <- pmin(Z, 50)
total_losses[i] <- sum(Z)
}
# (2) truncate and LDA
num_simulations <- 1000
total_losses <- numeric(num_simulations)
for (i in 1:num_simulations){
N <- rnbinom(1
,size=nbinom.est$estimate["size"]
, mu=nbinom.est$estimate["mu"] )
if (N==0){
Z <- 0
}else{
Z <- rlognormgpd(N,
lnmean = lnorm_model$estimate["meanlog"],
lnsd = lnorm_model$estimate["sdlog"],
u = 2,
sigmau = gpd.model$fitted.values["scale"],
xi = gpd.model$fitted.values["shape"])
}
Z <- pmin(Z, 50)
total_losses[i] <- sum(Z)
}
truncated_loss_distribution <- total_losses
plotdist(X)
# (3) Cyber n policies
n <- 50
X_uw_mean <- n*mean(truncated_loss_distribution)
# (4) calculate final SCR
b <- 0.6
X_uw_mean
summary(truncated_loss_distribution)
X <- total_losses
summary(X)
summary(sas$Loss.Amount...M.)
mean(pmin(sas$Loss.Amount...M., 50))
mean(sas$Loss.Amount...M.)
mean(pmin(sas$Loss.Amount...M., 50))
length(loss.body)
length(loss.tail)
# (2) truncate and LDA
num_simulations <- 100000
total_losses <- numeric(num_simulations)
for (i in 1:num_simulations){
N <- rnbinom(1
,size=nbinom.est$estimate["size"]
, mu=nbinom.est$estimate["mu"] )
if (N==0){
Z <- 0
}else{
Z <- rlognormgpd(N,
lnmean = lnorm_model$estimate["meanlog"],
lnsd = lnorm_model$estimate["sdlog"],
u = 2,
sigmau = gpd.model$fitted.values["scale"],
xi = gpd.model$fitted.values["shape"])
}
Z <- pmin(Z, 50)
total_losses[i] <- sum(Z)
}
X <- total_losses
summary(X)
X
N
plotdist(log(sas$Loss.Amount...M.))
mean(sas$Loss.Amount...M.)
mean(ln(sas$Loss.Amount...M.)) # 36.274 (43.9)
mean(log(sas$Loss.Amount...M.)) # 36.274 (43.9)
mean(freq.data)
mean(pmin(sas$Loss.Amount...M., 50)) #
mean(X) # (0.63)
plotdist(Z)
for (i in 1:num_simulations){
N <- rnbinom(1
,size=nbinom.est$estimate["size"]
, mu=nbinom.est$estimate["mu"] )
if (N==0){
Z <- 0
}else{
Z <- rlognormgpd(N,
lnmean = lnorm_model$estimate["meanlog"],
lnsd = lnorm_model$estimate["sdlog"],
u = 2,
sigmau = gpd.model$fitted.values["scale"],
xi = gpd.model$fitted.values["shape"])
}
total_losses[i] <- sum(Z)
}
X <- pmin(total_losses, 50)
mean(X) # (0.63)
# =====================================================================================================
# Statistics of Loss amount
# Min     1st Qu.     Median    Mean     3rd Qu.     Max.
# 0.100   0.383       1.395     36.274   6.795       12180.700
# =====================================================================================================
install.packages("PresenceAbsence")
library("rlang")
library("ggplot2")
library("MASS") # import plotdist
library("fitdistrplus") #fitdist
library("POT") # import fitgpd
library("quantmod")
library("lubridate")
library("evmix")
library("psych")
library("PresenceAbsence")
setwd("../../05. 개인자료/01. 깃허브 레포지토리/risk-management-papers/code")
getwd()
sas <- read.csv("../../dataset/SAS.csv")
sas$Month...Year.of.Settlement <- ymd(sas$Month...Year.of.Settlement)
sas <- subset(sas, Month...Year.of.Settlement < ymd("2015-01-01"))
sas <- subset(sas, Month...Year.of.Settlement > ymd("1995-01-01"))
sas <- sas[sas$cyber_risk==1,]
length(sas$Reference.ID.Code)
length(sas$Loss.Amount...M.) # Length is 1593
colnames(sas)
describe(sas$Loss.Amount...M.)
summary(sas$Loss.Amount...M.)
sas$date_year <- as.Date(paste0(format(as.Date(sas$Month...Year.of.Settlement)
, "%Y-%m"), "-01"))
sas_date_table <- data.frame(table(sas$date_year))
start_date <- min(sas$date_year)
end_date <- max(sas$date_year)
date_sequence <- seq(from = start_date, to = end_date, by = "month")
date_table <- data.frame(Var1 = as.Date(date_sequence), Freq = 0)
frequency <- merge(date_table, sas_date_table, by = "Var1", all.x = TRUE)
frequency$Freq.y[is.na(frequency$Freq.y)] <- 0
frequency$Freq <- frequency$Freq.y
frequency <- frequency[, c("Var1", "Freq")]
plotdist(frequency$Freq)
freq.data <- frequency$Freq
nbinom.est <- fitdist(freq.data, "nbinom")
nbinom.est
plotdist(log(sas$Loss.Amount...M.))
mean(sas$Loss.Amount...M.) # 36.274(43.9)
mean(log(sas$Loss.Amount...M.)) # 0.654(0.8)
mean(pmin(sas$Loss.Amount...M., 50)) # 8.16(8.6)
optimal.thresholds(sas$Loss.Amount...M.)
sas$Loss.Amount...M.
sas$Loss.Amount...M.[:]
sas$Loss.Amount...M.[:,]
type(sas$Loss.Amount...M.)
class(sas$Loss.Amount...M.)
optimal.thresholds(data.frame(sas$Loss.Amount...M.))
data(SIM3DATA)
optimal.thresholds(SIM3DATA)
SIM3DATA
head(SIM3DATA)
optimal.thresholds(SIM3DATA$Predicted1)
quantile(sas$Loss.Amount...M., 0.85)
quantile(sas$Loss.Amount...M., 0.15)
quantile(sas$Loss.Amount...M., 0.85)
threshold <- quantile(sas$Loss.Amount...M., 0.85)
loss.body <- sas$Loss.Amount...M.[sas$Loss.Amount...M.<threshold]
loss.tail <- sas$Loss.Amount...M.[sas$Loss.Amount...M.>= threshold]
c(length(loss.body), length(loss.tail))
lnorm_model <- fitdist(loss.body, "lnorm", method = "mle")
gpd.model <- fitgpd(loss.tail, 0, "mle")
lnorm_model
gpd.model
Z <- rlognormgpd(length(sas$Loss.Amount...M.),
lnmean = lnorm_model$estimate["meanlog"],
lnsd = lnorm_model$estimate["sdlog"],
u = threshold,
sigmau = gpd.model$fitted.values["scale"],
xi = gpd.model$fitted.values["shape"])
summary(sas$Loss.Amount...M.)
summary(Z)
summary(rlnorm(length(sas$Loss.Amount...M.),
meanlog = lnorm_model$estimate["meanlog"],
sdlog = lnorm_model$estimate["sdlog"]))
threshold <- quantile(sas$Loss.Amount...M., 0.9)
loss.body <- sas$Loss.Amount...M.[sas$Loss.Amount...M.<threshold]
loss.tail <- sas$Loss.Amount...M.[sas$Loss.Amount...M.>= threshold]
c(length(loss.body), length(loss.tail))
lnorm_model <- fitdist(loss.body, "lnorm", method = "mle")
gpd.model <- fitgpd(loss.tail, 0, "mle")
lnorm_model
gpd.model
Z <- rlognormgpd(length(sas$Loss.Amount...M.),
lnmean = lnorm_model$estimate["meanlog"],
lnsd = lnorm_model$estimate["sdlog"],
u = threshold,
sigmau = gpd.model$fitted.values["scale"],
xi = gpd.model$fitted.values["shape"])
summary(sas$Loss.Amount...M.)
summary(Z)
threshold <- quantile(sas$Loss.Amount...M., 0.58)
loss.body <- sas$Loss.Amount...M.[sas$Loss.Amount...M.<threshold]
loss.tail <- sas$Loss.Amount...M.[sas$Loss.Amount...M.>= threshold]
c(length(loss.body), length(loss.tail))
lnorm_model <- fitdist(loss.body, "lnorm", method = "mle")
gpd.model <- fitgpd(loss.tail, 0, "mle")
lnorm_model
gpd.model
Z <- rlognormgpd(length(sas$Loss.Amount...M.),
lnmean = lnorm_model$estimate["meanlog"],
lnsd = lnorm_model$estimate["sdlog"],
u = threshold,
sigmau = gpd.model$fitted.values["scale"],
xi = gpd.model$fitted.values["shape"])
summary(sas$Loss.Amount...M.)
summary(Z)
library("mev")
# =====================================================================================================
# Statistics of Loss amount
# Min     1st Qu.     Median    Mean     3rd Qu.     Max.
# 0.100   0.383       1.395     36.274   6.795       12180.700
# =====================================================================================================
install.packages("mev")
library("mev")
threshold <- quantile(sas$Loss.Amount...M., 0.88)
fit <- fit_lognormal_gpd(sas$Loss.Amount...M., threshold = threshold)
setwd("../../05. 개인자료/01. 깃허브 레포지토리/risk-management-papers/code")
getwd()
sas <- read.csv("../../dataset/SAS.csv")
sas$Month...Year.of.Settlement <- ymd(sas$Month...Year.of.Settlement)
sas <- subset(sas, Month...Year.of.Settlement < ymd("2015-01-01"))
sas <- subset(sas, Month...Year.of.Settlement > ymd("1995-01-01"))
sas <- sas[sas$cyber_risk==1,]
length(sas$Reference.ID.Code)
colnames(sas)
describe(sas$Loss.Amount...M.)
summary(sas$Loss.Amount...M.)
unique(sas$Basel.Business.Line...Level.1)
insurance_sas <- sas[sas$Basel.Business.Line...Level.1=="Insurance",]
length(insurance_sas$Shareholder.Equity...M.) #Length is 100
# removing missing values
insurance_sas <- insurance_sas[!is.na(insurance_sas$Shareholder.Equity...M.),]
insurance_sas <- insurance_sas[!is.na(insurance_sas$Revenue...M.),]
insurance_sas <- insurance_sas[!is.na(insurance_sas$Assets...M.),]
length(insurance_sas$Assets...M.) #Length is 92
# calculate scr_op=min(0.3*bscr, bc)
insurance_sas$Shareholder.Equity...M.
insurance_sas$bscr <- 0.3*(insurance_sas$Shareholder.Equity...M./2.11) #0.3bscr
insurance_sas$bscr
insurance_sas$bc <- pmax(0.035*insurance_sas$Revenue...M., 0.017*(insurance_sas$Assets...M.- insurance_sas$Shareholder.Equity...M.))
insurance_sas$op <- pmin(insurance_sas$bscr, insurance_sas$bc)
plot(insurance_sas$op, insurance_sas$Loss.Amount...M.,
xlab = "SCR_op", ylab = "Cyber Losses",
xlim = c(10, 15000),
ylim = c(0, 500),
main = "Operational Cyber Risk")
# y=x 그래프 추가
abline(a = 0, b = 1, col = "red")
# 그래프에 각 케이스 점으로 추가
points(insurance_sas$op, insurance_sas$Loss.Amount...M., col = "black")
cnt <- sum(insurance_sas$op < insurance_sas$Loss.Amount...M.)
cnt # the number of underestimated cases is 3
### referred by EC(2015) annex II
s.general_liability_p <- 0.14
s.general_liability_r <- 0.11
s.legal_expenses_p <- 0.07
s.legal_expenses_r <- 0.12
s.mis_financial_p <- 0.13
s.mis_financial_r <- 0.20
### referred by EC (2015) annex XI and XII
s.liability <- 1/3
s.other_cat_risk <- 0.4/3
corr.cat <- 0
### calculate s of 3 LoBs
s.general_liability <- round(sqrt((s.general_liability_p/2)^2+(s.general_liability_r/2)^2+2*0.5*(s.general_liability_p/2)*(s.general_liability_r/2)),2)
s.general_liability # 0.11
s.legal_expenses <- round(sqrt((s.legal_expenses_p/2)^2+(s.legal_expenses_r/2)^2+2*0.5*(s.legal_expenses_p/2)*(s.legal_expenses_r/2)),2)
s.legal_expenses # 0.08
s.mis_financial <- round(sqrt((s.mis_financial_p/2)^2+(s.mis_financial_r/2)^2+2*0.5*(s.mis_financial_p/2)*(s.mis_financial_r/2)),2)
s.mis_financial # 0.14
### calculate s of premium and reserve risk
s.premium_reserve <- round(sqrt((s.general_liability/3)^2
+(s.legal_expenses/3)^2+(s.mis_financial/3)^2
+(s.general_liability/3)*((s.legal_expenses/3)+(s.mis_financial/3))
+(s.legal_expenses/3)*(s.mis_financial/3)),2)
s.premium_reserve # 0.09
### calculate s of catastrophe risk
s.catastrophe <- round(sqrt((s.liability/2)^2 + (s.other_cat_risk/2)^2),2)
s.catastrophe # 0.18
### calculate s of non-life module
corr.non_life <- 0.25
s.non_life <- round(sqrt(s.premium_reserve^2
+ (s.catastrophe/2)^2
+ 2*corr.non_life
*s.premium_reserve
*(s.catastrophe/2)),2)
s.non_life # 0.14
sas$date_year <- as.Date(paste0(format(as.Date(sas$Month...Year.of.Settlement)
, "%Y-%m"), "-01"))
s.non_life # 0.14
sas_date_table <- data.frame(table(sas$date_year))
start_date <- min(sas$date_year)
end_date <- max(sas$date_year)
date_sequence <- seq(from = start_date, to = end_date, by = "month")
date_table <- data.frame(Var1 = as.Date(date_sequence), Freq = 0)
frequency <- merge(date_table, sas_date_table, by = "Var1", all.x = TRUE)
frequency$Freq.y[is.na(frequency$Freq.y)] <- 0
frequency$Freq <- frequency$Freq.y
frequency <- frequency[, c("Var1", "Freq")]
plotdist(frequency$Freq)
freq.data <- frequency$Freq
nbinom.est <- fitdist(freq.data, "nbinom")
nbinom.est
mean(sas$Loss.Amount...M.) # 36.274(43.9)
mean(Z)
plotdist(sas$Loss.Amount...M.)
plotdist(log(sas$Loss.Amount...M.))
threshold <- 2
loss.body <- sas$Loss.Amount...M.[sas$Loss.Amount...M.<threshold]
loss.tail <- sas$Loss.Amount...M.[sas$Loss.Amount...M.>= threshold]
c(length(loss.body), length(loss.tail))
lnorm_model <- fitdist(loss.body, "lnorm", method = "mle")
gpd.model <- fitgpd(loss.tail, 0, "mle")
lnorm_model
gpd.model
gpd.model$fitted.values["scale"]
gpd.model$fitted.values["shape"]
lnorm_model$estimate["meanlog"]
lnorm_model$estimate["sdlog"]
mean(frequency$Freq)
mean(pmin(Z, 50))
plotdist(log(pmin(Z, 50)))
mean(Z)
# ----------------------------------------
# 2. truncate and LDA
num_simulations <- 50
total_losses <- numeric(num_simulations)
for (i in 1:num_simulations){
N <- rnbinom(1
,size=nbinom.est$estimate["size"]
, mu=nbinom.est$estimate["mu"] )
if (N==0){
Z <- 0
}else{
Z <- rlognormgpd(N,
lnmean = lnorm_model$estimate["meanlog"],
lnsd = lnorm_model$estimate["sdlog"],
u = 2,
sigmau = gpd.model$fitted.values["scale"],
xi = gpd.model$fitted.values["shape"])
}
total_losses[i] <- sum(Z)
}
for (i in 1:num_simulations){
N <- rnbinom(1
,size=nbinom.est$estimate["size"]
, mu=nbinom.est$estimate["mu"] )
if (N==0){
Z <- 0
}else{
Z <- pmin(rlognormgpd(N,
lnmean = lnorm_model$estimate["meanlog"],
lnsd = lnorm_model$estimate["sdlog"],
u = 2,
sigmau = gpd.model$fitted.values["scale"],
xi = gpd.model$fitted.values["shape"]), 50)
}
total_losses[i] <- sum(Z)
}
mean(X_uw) # (0.63)
plotdist(total_losses)
mean(total_losses)
# ----------------------------------------
# 2. truncate and LDA
num_simulations <- 50
total_losses <- numeric(num_simulations)
for (i in 1:num_simulations){
N <- rnbinom(1
,size=nbinom.est$estimate["size"]
, mu=nbinom.est$estimate["mu"] )
if (N==0){
Z <- 0
}else{
Z <- pmin(rlognormgpd(N,
lnmean = lnorm_model$estimate["meanlog"],
lnsd = lnorm_model$estimate["sdlog"],
u = 2,
sigmau = gpd.model$fitted.values["scale"],
xi = gpd.model$fitted.values["shape"]), 50)
}
total_losses[i] <- sum(Z)
}
mean(total_losses)
data <- read.csv("./dataset/systemic_cyber_risk.csv")
sas <- read.csv("../../dataset/SAS.csv")
sas$Month...Year.of.Settlement <- ymd(sas$Month...Year.of.Settlement)
sas <- subset(sas, Month...Year.of.Settlement < ymd("2015-01-01"))
sas <- subset(sas, Month...Year.of.Settlement > ymd("1995-01-01"))
sas <- sas[sas$cyber_risk==1,]
length(sas$Reference.ID.Code)# Length is 1758(1593)
colnames(sas)
describe(sas$Loss.Amount...M.)
### referred by EC(2015) annex II
s.general_liability_p <- 0.14
s.general_liability_r <- 0.11
s.legal_expenses_p <- 0.07
s.legal_expenses_r <- 0.12
s.mis_financial_p <- 0.13
s.mis_financial_r <- 0.20
### referred by EC (2015) annex XI and XII
s.liability <- 1/3
s.other_cat_risk <- 0.4/3
corr.cat <- 0
### calculate s of 3 LoBs
s.general_liability <- round(sqrt((s.general_liability_p/2)^2+(s.general_liability_r/2)^2+2*0.5*(s.general_liability_p/2)*(s.general_liability_r/2)),2)
s.general_liability # 0.11
s.legal_expenses <- round(sqrt((s.legal_expenses_p/2)^2+(s.legal_expenses_r/2)^2+2*0.5*(s.legal_expenses_p/2)*(s.legal_expenses_r/2)),2)
s.legal_expenses # 0.08
s.mis_financial <- round(sqrt((s.mis_financial_p/2)^2+(s.mis_financial_r/2)^2+2*0.5*(s.mis_financial_p/2)*(s.mis_financial_r/2)),2)
s.mis_financial # 0.14
### calculate s of premium and reserve risk
s.premium_reserve <- round(sqrt((s.general_liability/3)^2
+(s.legal_expenses/3)^2+(s.mis_financial/3)^2
+(s.general_liability/3)*((s.legal_expenses/3)+(s.mis_financial/3))
+(s.legal_expenses/3)*(s.mis_financial/3)),2)
s.premium_reserve # 0.09
### calculate s of catastrophe risk
s.catastrophe <- round(sqrt((s.liability/2)^2 + (s.other_cat_risk/2)^2),2)
s.catastrophe # 0.18
### calculate s of non-life module
corr.non_life <- 0.25
s.non_life <- round(sqrt(s.premium_reserve^2
+ (s.catastrophe/2)^2
+ 2*corr.non_life
*s.premium_reserve
*(s.catastrophe/2)),2)
s.non_life # 0.14
sas$date_year <- as.Date(paste0(format(as.Date(sas$Month...Year.of.Settlement)
, "%Y-%m"), "-01"))
sas_date_table <- data.frame(table(sas$date_year))
start_date <- min(sas$date_year)
end_date <- max(sas$date_year)
date_sequence <- seq(from = start_date, to = end_date, by = "month")
date_table <- data.frame(Var1 = as.Date(date_sequence), Freq = 0)
frequency <- merge(date_table, sas_date_table, by = "Var1", all.x = TRUE)
frequency$Freq.y[is.na(frequency$Freq.y)] <- 0
frequency$Freq <- frequency$Freq.y
frequency <- frequency[, c("Var1", "Freq")]
plotdist(frequency$Freq)
freq.data <- frequency$Freq
mean(frequency$Freq)
nbinom.est <- fitdist(freq.data, "nbinom")
nbinom.est
mean(sas$Loss.Amount...M.) # 36.274
mean(sas$Loss.Amount...M.) # 36.274
threshold <- 2
loss.body <- sas$Loss.Amount...M.[sas$Loss.Amount...M.<threshold]
loss.tail <- sas$Loss.Amount...M.[sas$Loss.Amount...M.>= threshold]
c(length(loss.body), length(loss.tail))
lnorm_model <- fitdist(loss.body, "lnorm", method = "mle")
gpd.model <- fitgpd(loss.tail, 0, "mle")
lnorm_model
gpd.model
Z <- rlognormgpd(length(sas$Loss.Amount...M.),
lnmean = lnorm_model$estimate["meanlog"],
lnsd = lnorm_model$estimate["sdlog"],
u = threshold,
sigmau = gpd.model$fitted.values["scale"],
xi = gpd.model$fitted.values["shape"])
summary(Z)
describe(Z)
library("PerformanceAnalytics")
VaR(Z, p = 0.995, method = "historical", na.rm = TRUE)
plotdist(log(Z))
length(Z)
VaR(sas$Loss.Amount...M., p = 0.995, method = "historical", na.rm = TRUE)
describe(pmin(Z, 50))
VaR(pmin(Z,50), p = 0.995, method = "historical", na.rm = TRUE)
VaR(pmin(Z,50), p = 0.05, method = "historical", na.rm = TRUE)
# =====================================================================================================
# Statistics of Loss amount
# Min     1st Qu.     Median    Mean     3rd Qu.     Max.
# 0.100   0.383       1.395     36.274   6.795       12180.700
# =====================================================================================================
install.packages("tsDyn")
library("tsDyn")
TVAR(pmin(Z,50))
TVAR(pmin(Z,50), lag = 2)
library("actuar")
CTE(pmin(Z,50), conf.leve = 0.995)
TVAR(pmin(Z,50), conf.leve = 0.995)
ES(pmin(Z,50), p = 0.05, method = "historical", na.rm = TRUE)
describe(pmin(Z, 50))
x = c(50,70,90,80)
y = c(60,80,70,90)
result = cor(x, y, method = &quot;kendall&quot;)
install.packages("DescTools")
library(DescTools)
KendallTauA(x,y)
x = c(50,70,90,80)
y = c(60,80,70,90)
KendallTauA(x,y)
